# Example data for using the as.factor function
numeric_vector <- c(1, 2, 1, 3, 2, 3)
# Use as.factor to convert a numeric vector to a factor
factor_result <- as.factor(numeric_vector)
# Display the result
print(factor_result)
comestible <- c('o','o','o','o','o','n','n','n','n','n')
factor_result <- as.factor(comestible)
print(factor_result)
factor(comestible)
citdata <- read.delim("https://slcladal.github.io/data/treedata.txt", header = T, sep = "\t")
# inspect the data (head shows the first 6 lines)
head(citdata)
View(citdata)
champignons <- champignons %>% mutate_if(is.character, factor)
champi.ctree <- ctree(couleur ~ ., data = champignons, controls = ctree_control(maxsurrogate = 3))
plot(champi.ctree)
str(champignons)
champignons <- champignons %>% mutate_if(is.character, factor)
control2 = ctree_control(mincriterion = 1-(.05*ncol(champignons)-1))
champi.ctree <- ctree(couleur ~ ., data = champignons)
plot(champi.ctree)
control2 = ctree_control(mincriterion = 1-(.05*ncol(champignons)-1))
champi.ctree <- ctree(comestible ~ chapeau + tige + couleur, data = champignons)
plot(champi.ctree)
table(champignons)
champignons <- data.frame(comestible,chapeau,tige,couleur)
table(champignons)
control2 = ctree_control(mincriterion = 1-(.05*ncol(champignons)-1))
champi.ctree <- ctree(comestible ~ chapeau + tige + couleur, data = champignons)
champi.tree <- ctree(couleur ~ chapeau + tige + comestible, data = champignons,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
champignons <- champignons %>% mutate_if(is.character, factor)
champi.tree <- ctree(couleur ~ chapeau + tige + comestible, data = champignons,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
plot(champi.tree)
champi.tree <- ctree(couleur ~ chapeau + tige + comestible, data = champignons,
controls = ctree_control(mincriterion = 0.5, minsplit = 2))
plot(champi.tree)
champi.tree <- ctree(couleur ~ chapeau + tige + comestible, data = champignons,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
plot(champi.tree)
champi.tree <- ctree(couleur ~ chapeau + tige + comestible, data = champignons,
controls = ctree_control(mincriterion = 0.8, minsplit = 1))
plot(champi.tree)
champi.tree <- ctree(couleur ~ chapeau + tige + comestible, data = champignons,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
plot(champi.tree)
table(champignons$couleur, champignons$chapeau)
table(champignons$couleur, champignons$tige)
table(champignons$couleur, champignons$comestible)
champignons <- champignons %>% mutate_if(is.character, factor)
champi.tree <- ctree(comestible ~ chapeau + tige + couleur, data = champignons,
controls = ctree_control(mincriterion = 0.5, minsplit = 2))
plot(champi.tree)
champi.tree <- ctree(comestible ~ chapeau + tige + couleur, data = champignons,
controls = ctree_control(mincriterion = 0.2, minsplit = 2))
champi.tree <- ctree(comestible ~ chapeau + tige + couleur, data = champignons,
controls = ctree_control(mincriterion = 0.1, minsplit = 2))
install.packages("rpar")
library(rpart)
# Build a tree with rpart
champi_rpart <- rpart(comestible ~ chapeau + tige + couleur, data = champignons)
# Plot the rpart tree
plot(champi_rpart)
summary(champignons)
set.seed(123)
n <- 100
sim_data <- data.frame(
comestible = sample(c('o', 'n'), n, replace = TRUE),
chapeau = sample(c('a', 'pl', 'po'), n, replace = TRUE),
tige = sample(c('e', 'f'), n, replace = TRUE),
couleur = sample(c('b', 'j', 'r'), n, replace = TRUE)
)
# Build a new tree with the simulated data
champi_sim_tree <- ctree(comestible ~ chapeau + tige + couleur, data = sim_data,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
library(party)
set.seed(123)
n <- 100
sim_data <- data.frame(
comestible = sample(c('o', 'n'), n, replace = TRUE),
chapeau = sample(c('a', 'pl', 'po'), n, replace = TRUE),
tige = sample(c('e', 'f'), n, replace = TRUE),
couleur = sample(c('b', 'j', 'r'), n, replace = TRUE)
)
# Build a new tree with the simulated data
champi_sim_tree <- ctree(comestible ~ chapeau + tige + couleur, data = sim_data,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
set.seed(123)
n <- 100
sim_data <- data.frame(
comestible = sample(c('o', 'n'), n, replace = TRUE),
chapeau = sample(c('a', 'pl', 'po'), n, replace = TRUE),
tige = sample(c('e', 'f'), n, replace = TRUE),
couleur = sample(c('b', 'j', 'r'), n, replace = TRUE)
)
champignons <- champignons %>% mutate_if(is.character, factor)
library(dplyr)
set.seed(123)
n <- 100
sim_data <- data.frame(
comestible = sample(c('o', 'n'), n, replace = TRUE),
chapeau = sample(c('a', 'pl', 'po'), n, replace = TRUE),
tige = sample(c('e', 'f'), n, replace = TRUE),
couleur = sample(c('b', 'j', 'r'), n, replace = TRUE)
)
champignons <- champignons %>% mutate_if(is.character, factor)
# Build a new tree with the simulated data
champi_sim_tree <- ctree(comestible ~ chapeau + tige + couleur, data = sim_data,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
set.seed(123)
n <- 100
sim_data <- data.frame(
comestible = sample(c('o', 'n'), n, replace = TRUE),
chapeau = sample(c('a', 'pl', 'po'), n, replace = TRUE),
tige = sample(c('e', 'f'), n, replace = TRUE),
couleur = sample(c('b', 'j', 'r'), n, replace = TRUE)
)
sim_data <- sim_data %>% mutate_if(is.character, factor)
# Build a new tree with the simulated data
champi_sim_tree <- ctree(comestible ~ chapeau + tige + couleur, data = sim_data,
controls = ctree_control(mincriterion = 0.8, minsplit = 2))
plot(champi_sim_tree)
# Build a tree with rpart
champi_rpart <- rpart(comestible ~ chapeau + tige + couleur, data = champignons)
# Plot the rpart tree
plot(champi_rpart)
# Fit a logistic regression model
logit_model <- glm(comestible ~ chapeau + tige + couleur, data = champignons, family = "binomial")
# Summarize the model to see which predictors have an effect
summary(logit_model)
install.packages("randomForest")
library(randomForest)
# Fit a random forest model
rf_model <- randomForest(comestible ~ chapeau + tige + couleur, data = champignons, ntree = 100)
# Plot the importance of each predictor
varImpPlot(rf_model)
View(tableau)
I_AS <- H_A + H_S - H_AS
I_AC <- H_A + H_C - H_AC
I_SC <- H_S + H_C - H_SC
I_A <- I_AS + I_AC
I_S <- I_AS + I_SC
I_C <- I_AC + I_SC
max(I_A,I_S,I_C)
print(I_A)
print(I_S)
print(I_C)
tab_agr <- tableau[,c(1,7)]
View(tab_agr)
tab_agr <- tableau[c(1,7),]
tab_agr <- tableau[c(1,7),]
agr_age <- colSums(tab_agr)
tab_agr <- maitrix_tableau[c(1,7),]
tab_agr <- matrix_tableau[c(1,7),]
agr_age <- colSums(tab_agr)
H2_A <- Entropy(agr_age)
library(DescTools)
library(dplyr)
library(partykit)
library(ggparty)
tab_agr <- matrix_tableau[c(1,7),]
agr_age <- colSums(tab_agr)
H2_A <- Entropy(agr_age)
agr_sexe <- rowSums(tab_agr)
H2_S <- Entropy(agr_sexe)
print(I_AC)
print(I_AS)
## 2)
I_AS <- H_A + H_S - H_AS
I_AC <- H_A + H_C - H_AC
I_SC <- H_S + H_C - H_SC
I_A <- I_AS + I_AC
I_S <- I_AS + I_SC
I_C <- I_AC + I_SC
print(I_AS)
library(DescTools)
library(dplyr)
library(partykit)
library(ggparty)
##Exercice 1 :
categories <- as.data.frame(c("Agriculteurs","Artisans","Cadres","Libéraux","Employés","Ouvriers"))
sexes <- c("Femmes","Femmes","Femmes","Femmes","Femmes","Femmes","Hommes","Hommes","Hommes","Hommes","Hommes","Hommes")
matrix_tableau <- cbind( c(27.8,117.4,564.9,1353.7,1570.9,1271.6,24.2,79.2,315.7,613.3,476.0,1058.8),
c(70.0,357.9,1209.0,1840.7,1605.6,1285.9,56.2,258.4,685.3,834.7,449.5,1068.5),
c(119.6,556.1,1429.5,1895.0,1880.9,1362.7,89.8,387.2,853.2,915.7,416.0,1065.5),
c(187.1,525.8,1161.6,1507.8,1819.6,1300.4,138.0,378.7,719.0,755.9,329.8,987.9),
c(76.9,184.8,360.0,256.2,397.0,180.5,43.4,128.7,240.1,123.7,58.3,130.1) )
tableau <- as.data.frame(matrix_tableau)
tableau <- cbind(sexes, cbind( rbind(categories, categories), tableau ) )
colnames(tableau) <- c("Sexes","Catégories","De 15 à 29 ans","De 30 à 39 ans","De 40 à 49 ans","De 50 à 59 ans","60 ans ou plus")
## 1)
#Au vu du tableau, on aimerait conditionner l'âge par la catégorie socioprofessionelle et le sexe.
#Que les individus soient hommes ou femmes, il semblerait que les plus jeunes ont plus tendance
#à être des employés, c'est-à-dire sous les ordres d'un responsable, ou ouvriers, c'est-à-dire
#faire des métiers physiques, alors que les plus âgés sont plus souvent des cadres, c'est-à-dire
#être des responsables ou faire des métiers dits "de bureau".
matrix_tableau <- matrix_tableau/sum(matrix_tableau)
#Calcul de toutes les entropies :
H <- Entropy(matrix_tableau)
categorie <- rep(0,6)
for (i in 1:6){
categorie[i] <- sum( matrix_tableau[i,] ) + sum( matrix_tableau[i+6,] )
}
H_C <- Entropy(categorie)
sexe <- c( sum(matrix_tableau[1:6,]),sum(matrix_tableau[7:12,]) )
H_S <- Entropy(sexe)
age <- colSums(matrix_tableau)
H_A <- Entropy(age)
age_sexe <- rep(0,10)
for (i in 1:5){
age_sexe[i] <- sum(matrix_tableau[1:6,i])
age_sexe[i+5] <- sum(matrix_tableau[7:12,i])
}
H_AS <- Entropy(age_sexe)
age_categorie <- matrix(0,5,6)
for (i in 1:5){
for (j in 1:6){
age_categorie[i,j] <- matrix_tableau[j,i] + matrix_tableau[j+6,i]
}}
H_AC <- Entropy(age_categorie)
sexe_categorie <- rowSums(matrix_tableau)
H_SC <- Entropy(sexe_categorie)
#Calcul des informations mutuelles :
I_C_AS <- H_C + H_AS - H
I_S_AC <- H_S + H_AC - H
I_A_SC <- H_A + H_SC - H
rapport_A <- I_A_SC/H_A
rapport_C <- I_C_AS/H_C
rapport_S <- I_S_AC/H_S #rapport le plus élevé
#Notre première impression n'était pas la plus juste, il aurait fallu penser à
#conditionner le sexe par la catégorie socioprofessionnelle et l'âge plutôt.
## 2)
I_AS <- H_A + H_S - H_AS
I_AC <- H_A + H_C - H_AC
I_SC <- H_S + H_C - H_SC
I_A <- I_AS + I_AC
I_S <- I_AS + I_SC
I_C <- I_AC + I_SC
print(I_AS)
print(I_SC)
print(I_A)
print(I_S)
print(C)
print(I_C)
print(I_Y_Z1)
View(matrix_tableau)
library(party)
library(dplyr)
citdata <- read.delim("https://slcladal.github.io/data/treedata.txt", header = T, sep = "\t")
# inspect the data (head shows the first 6 lines)
head(citdata)
View(citdata)
View(tableau)
##Exercice 1 :
categories <- c("Agriculteurs","Artisans","Cadres","Libéraux","Employés","Ouvriers")
sexes <- c("Femmes","Femmes","Femmes","Femmes","Femmes","Femmes","Hommes","Hommes","Hommes","Hommes","Hommes","Hommes")
matrix_tableau <- cbind( c(27.8,117.4,564.9,1353.7,1570.9,1271.6,24.2,79.2,315.7,613.3,476.0,1058.8),
c(70.0,357.9,1209.0,1840.7,1605.6,1285.9,56.2,258.4,685.3,834.7,449.5,1068.5),
c(119.6,556.1,1429.5,1895.0,1880.9,1362.7,89.8,387.2,853.2,915.7,416.0,1065.5),
c(187.1,525.8,1161.6,1507.8,1819.6,1300.4,138.0,378.7,719.0,755.9,329.8,987.9),
c(76.9,184.8,360.0,256.2,397.0,180.5,43.4,128.7,240.1,123.7,58.3,130.1) )
tableau <- as.data.frame(matrix_tableau)
tableau <- cbind(sexes, cbind( rbind(categories, categories), tableau ) )
colnames(tableau) <- c("Sexes","Catégories","De 15 à 29 ans","De 30 à 39 ans","De 40 à 49 ans","De 50 à 59 ans","60 ans ou plus")
View(tableau)
##Exercice 1 :
categories <- as.data.frame(c("Agriculteurs","Artisans","Cadres","Libéraux","Employés","Ouvriers"))
sexes <- c("Femmes","Femmes","Femmes","Femmes","Femmes","Femmes","Hommes","Hommes","Hommes","Hommes","Hommes","Hommes")
matrix_tableau <- cbind( c(27.8,117.4,564.9,1353.7,1570.9,1271.6,24.2,79.2,315.7,613.3,476.0,1058.8),
c(70.0,357.9,1209.0,1840.7,1605.6,1285.9,56.2,258.4,685.3,834.7,449.5,1068.5),
c(119.6,556.1,1429.5,1895.0,1880.9,1362.7,89.8,387.2,853.2,915.7,416.0,1065.5),
c(187.1,525.8,1161.6,1507.8,1819.6,1300.4,138.0,378.7,719.0,755.9,329.8,987.9),
c(76.9,184.8,360.0,256.2,397.0,180.5,43.4,128.7,240.1,123.7,58.3,130.1) )
tableau <- as.data.frame(matrix_tableau)
tableau <- cbind(sexes, cbind( rbind(categories, categories), tableau ) )
colnames(tableau) <- c("Sexes","Catégories","De 15 à 29 ans","De 30 à 39 ans","De 40 à 49 ans","De 50 à 59 ans","60 ans ou plus")
View(tableau)
library(tidyr)
# Reshape the data to long format
tableau_long <- pivot_longer(tableau,
cols = starts_with(c("De","60")),
names_to = "Age",
values_to = "Effectifs")
# View the resulting data frame
print(tableau_long)
View(tableau_long)
tableau_long <- pivot_longer(tableau,
cols = starts_with(c("De","60")),
names_to = "Age",
values_to = "Effectifs")
print(tableau_long)
tableau_long <- tableau_long %>% mutate_if(is.character, factor)
control = ctree_control(mincriterion = 1-(.05*ncol(tableau_long)-1))
tableau.ctree <- ctree(Effectifs ~ Catégories + Age + Sexes, data = tableau_long)
plot(tableau.ctree, gp = gpar(fontsize = 8))
ggparty(champi.ctree) + geom_edge() + geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p", ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))), size = 10)),
line_gpar = list(list(size = 13), list(size = 10)), ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = 0.01, nudge_x = 0.01) + geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = couleur), position = position_fill(), color = "black"),
theme_minimal(), theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()),
scale_fill_manual(values = c("gray50", "gray80"), guide = FALSE),
scale_y_continuous(breaks = seq(0, 100, 20), limits = c(0, 100)),
xlab(""), ylab("Frequency"), geom_text(aes(x = "", group = couleur,
label = stat(count)), stat = "count", position = position_dodge(0.9), vjust = -0.7)),
shared_axis_labels = TRUE)
library(ggparty)
ggparty(champi.ctree) + geom_edge() + geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p", ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))), size = 10)),
line_gpar = list(list(size = 13), list(size = 10)), ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = 0.01, nudge_x = 0.01) + geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = couleur), position = position_fill(), color = "black"),
theme_minimal(), theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()),
scale_fill_manual(values = c("gray50", "gray80"), guide = FALSE),
scale_y_continuous(breaks = seq(0, 100, 20), limits = c(0, 100)),
xlab(""), ylab("Frequency"), geom_text(aes(x = "", group = couleur,
label = stat(count)), stat = "count", position = position_dodge(0.9), vjust = -0.7)),
shared_axis_labels = TRUE)
ggparty(champi.ctree) + geom_edge() + geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p", ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))), size = 10)),
line_gpar = list(list(size = 13), list(size = 10)), ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = 0.01, nudge_x = 0.01) + geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Catégories), position = position_fill(), color = "black"),
theme_minimal(), theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()),
scale_fill_manual(values = c("gray50", "gray80"), guide = FALSE),
scale_y_continuous(breaks = seq(0, 100, 20), limits = c(0, 100)),
xlab(""), ylab("Frequency"), geom_text(aes(x = "", group = Catégories,
label = stat(count)), stat = "count", position = position_dodge(0.9), vjust = -0.7)),
shared_axis_labels = TRUE)
ggparty(champi.ctree) + geom_edge() + geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p", ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))), size = 10)),
line_gpar = list(list(size = 13), list(size = 10)), ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = 0.01, nudge_x = 0.01) + geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Effectifs), position = position_fill(), color = "black"),
theme_minimal(), theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()),
scale_fill_manual(values = c("gray50", "gray80"), guide = FALSE),
scale_y_continuous(breaks = seq(0, 100, 20), limits = c(0, 100)),
xlab(""), ylab("Frequency"), geom_text(aes(x = "", group = Effectifs,
label = stat(count)), stat = "count", position = position_dodge(0.9), vjust = -0.7)),
shared_axis_labels = TRUE)
?ggparty
ggparty(tableau.ctree) + geom_edge() + geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p", ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))), size = 10)),
line_gpar = list(list(size = 13), list(size = 10)), ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = 0.01, nudge_x = 0.01) + geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Effectifs), position = position_fill(), color = "black"),
theme_minimal(), theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()),
scale_fill_manual(values = c("gray50", "gray80"), guide = FALSE),
scale_y_continuous(breaks = seq(0, 100, 20), limits = c(0, 100)),
xlab(""), ylab("Frequency"), geom_text(aes(x = "", group = Effectifs,
label = stat(count)), stat = "count", position = position_dodge(0.9), vjust = -0.7)),
shared_axis_labels = TRUE)
ggparty(tableau.ctree) +
geom_edge() +
geom_edge_label() +
geom_node_label(aes(label = splitvar),
ids = "inner") +
geom_node_label(aes(label = info),
ids = "terminal")
plot(tableau.ctree, gp = gpar(fontsize = 8))
control = ctree_control(mincriterion = 1-(.05*ncol(tableau_long)-1))
tableau.ctree <- ctree(Catégories ~ Age + Sexes, data = tableau_long)
plot(tableau.ctree, gp = gpar(fontsize = 8))
control = ctree_control(mincriterion = 1-(.05*ncol(tableau_long)-1))
tableau.ctree <- ctree(Effectifs ~ Catégories + Age + Sexes, data = tableau_long)
plot(tableau.ctree, gp = gpar(fontsize = 8))
plot(tableau.ctree,
gp = gpar(fontsize = 10),         # Increase font size for better readability
inner_panel = node_inner(tableau.ctree,
pval = TRUE,         # Display p-values for splits
abbreviate = FALSE,  # Show full names of the variables
digits = 3),         # Show p-values up to 3 decimal places
terminal_panel = node_boxplot(tableau.ctree,
col = "lightblue",  # Customize boxplot color
fill = "lightgray"), # Fill boxplots with color
tp_args = list(boxcol = "black",  # Add a black border to the boxplot
boxwidth = 0.8),   # Adjust the box width for clearer comparison
edge_panel = function(...) {
panel_separating_edges(...)    # Use separating edges for better node distinction
},
drop_terminal = TRUE,             # Drop terminal text for boxplot nodes
main = "Customized ctree Plot")
library(grid)
ories + Age + Sexes, data = tableau_long)
tableau.ctree <- ctree(Effectifs ~ Catégories + Age + Sexes, data = tableau_long)
plot(tableau.ctree,
gp = gpar(fontsize = 10),         # Increase font size for better readability
inner_panel = node_inner(tableau.ctree,
pval = TRUE,         # Display p-values for splits
abbreviate = FALSE,  # Show full names of the variables
digits = 3),         # Show p-values up to 3 decimal places
terminal_panel = node_boxplot(tableau.ctree,
col = "lightblue",  # Customize boxplot color
fill = "lightgray"), # Fill boxplots with color
tp_args = list(boxcol = "black",  # Add a black border to the boxplot
boxwidth = 0.8),   # Adjust the box width for clearer comparison
edge_panel = function(...) {
panel_separating_edges(...)    # Use separating edges for better node distinction
},
drop_terminal = TRUE,             # Drop terminal text for boxplot nodes
main = "Customized ctree Plot")
tableau.ctree <- ctree(Effectifs ~ Catégories + Age + Sexes, data = tableau_long)
plot(tableau.ctree,
gp = gpar(fontsize = 10),         # Increase font size for better readability
inner_panel = node_inner(tableau.ctree,
pval = TRUE,         # Display p-values for splits
abbreviate = FALSE),  # Show full names of the variables         # Show p-values up to 3 decimal places
terminal_panel = node_boxplot(tableau.ctree,
col = "lightblue",  # Customize boxplot color
fill = "lightgray"), # Fill boxplots with color
tp_args = list(boxcol = "black",  # Add a black border to the boxplot
boxwidth = 0.8),   # Adjust the box width for clearer comparison
edge_panel = function(...) {
panel_separating_edges(...)    # Use separating edges for better node distinction
},
drop_terminal = TRUE,             # Drop terminal text for boxplot nodes
main = "Customized ctree Plot")
plot(tableau.ctree,
gp = gpar(fontsize = 10),         # Increase font size for better readability
inner_panel = node_inner(tableau.ctree,
pval = TRUE,         # Display p-values for splits
abbreviate = FALSE),  # Show full names of the variables         # Show p-values up to 3 decimal places
terminal_panel = node_boxplot(tableau.ctree,
col = "lightblue",  # Customize boxplot color
fill = "lightgray"), # Fill boxplots with color
tp_args = list(boxcol = "black",  # Add a black border to the boxplot
boxwidth = 0.8),   # Adjust the box width for clearer comparison
drop_terminal = TRUE,             # Drop terminal text for boxplot nodes
main = "Customized ctree Plot")
tableau.ctree <- ctree(Effectifs ~ Catégories + Age + Sexes, data = tableau_long)
plot(tableau.ctree,
gp = gpar(fontsize = 10),         # Increase font size for better readability
inner_panel = node_inner(tableau.ctree,
pval = FALSE,         # Display p-values for splits
abbreviate = FALSE),  # Show full names of the variables         # Show p-values up to 3 decimal places
terminal_panel = node_boxplot(tableau.ctree,
col = "lightblue",  # Customize boxplot color
fill = "lightgray"), # Fill boxplots with color
tp_args = list(boxcol = "black",  # Add a black border to the boxplot
boxwidth = 0.8),   # Adjust the box width for clearer comparison
drop_terminal = TRUE,             # Drop terminal text for boxplot nodes
main = "Customized ctree Plot")
plot(tableau.ctree,
gp = gpar(fontsize = 10),         # Increase font size for better readability
inner_panel = node_inner(tableau.ctree,
pval = FALSE,         # Display p-values for splits
abbreviate = FALSE),  # Show full names of the variables         # Show p-values up to 3 decimal places
terminal_panel = node_boxplot(tableau.ctree,
col = "orange",  # Customize boxplot color
fill = "lightgray"), # Fill boxplots with color
tp_args = list(boxcol = "black",  # Add a black border to the boxplot
boxwidth = 0.8),   # Adjust the box width for clearer comparison
drop_terminal = TRUE,             # Drop terminal text for boxplot nodes
main = "Customized ctree Plot")
plot(tableau.ctree,
gp = gpar(fontsize = 10),         # Increase font size for better readability
inner_panel = node_inner(tableau.ctree,
pval = FALSE,         # Display p-values for splits
abbreviate = FALSE),  # Show full names of the variables         # Show p-values up to 3 decimal places
terminal_panel = node_boxplot(tableau.ctree,
col = "orange",  # Customize boxplot color
fill = "lightblue"), # Fill boxplots with color
tp_args = list(boxcol = "black",  # Add a black border to the boxplot
boxwidth = 0.8),   # Adjust the box width for clearer comparison
drop_terminal = TRUE,             # Drop terminal text for boxplot nodes
main = "Customized ctree Plot")
sum(matrix_tableau)
categorie <- rep(0,6)
View(tableau_long)
weeklyd <- read.csv2(file = "./donnees_hebdo.csv", header = TRUE, sep = ';', dec = '.', stringsAsFactors = TRUE)
setwd("/Users/lauracletz/HAX712X/TEAM_PROJECT/data")
library(dplyr)
weeklyd <- read.csv2(file = "./donnees_hebdo.csv", header = TRUE, sep = ';', dec = '.', stringsAsFactors = TRUE)
View(weeklyd)
View(tableau_long)
View(tableau)
tableau_long <- pivot_longer(tableau,
cols = starts_with("X"),
names_to = "Jour",
values_to = "Intensité")
library(tidyr)
tableau_long <- pivot_longer(tableau,
cols = starts_with("X"),
names_to = "Jour",
values_to = "Intensité")
weeklyd <- pivot_longer(tableau,
cols = starts_with("X"),
names_to = "Jour",
values_to = "Intensité")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
weeklyd <- pivot_longer(weeklyd,
cols = starts_with("X"),
names_to = "Jour",
values_to = "Intensité")
