---
title: "Pédaler à Montpellier"
subtitle: "Projet HAX712X - Développement Logiciel"
author: "CLETZ Laura, EL QEMMAH Doha, GILLET Louison"
format: 
  revealjs:
    theme: solarized
    slideNumber: true
    transition: slide
    css: styles.css
    incremental: true
---

## Introduction

### Objectif du projet

Dans le cadre du module **HAX712X - Développement logiciel** du Master Statistique et Science des Données à l'Université de Montpellier, ce projet vise à :

1. **Observer** le trafic cycliste dans Montpellier à partir des données fournies par **Montpellier Méditerranée Métropole**.
2. **Prédire** le trafic cycliste pour les jours à venir grâce à des algorithmes de modélisation.

---

## Carte Interactive
![](images/screen_map_int.png)  \
**Données choisies :** données de comptage sur une semaine classique, du 18/03/2024 au 24/03/2024.  \
**Packages Python :** pandas, json, folium, branca.  \
**Objectif :** pouvoir prédire les zones les plus (et les moins) fréquentées par les cyclistes suivant le jour de la semaine.

## Vidéo

## Site Web

---

## Difficultés

### Laura
- Apprendre les particularités de chaque package, surtout folium.
  ```{.python code-line-numbers="1,3,7,8"}
  folium.Marker(
          location=[lat, lon], 
          icon=folium.Icon(icon="bicycle", 
                      prefix="fa", icon_color="black", 
                      color="black", icon_size=(10, 10), 
                      shadow_size=(0,0)), 
          popup=folium.Popup(name, parse_html=True), 
      ).add_to(Montpellier)
  ```
- Lire des dictionnaires json.
- Comprendre la stylisation CSS. 

## Difficultés

### Doha
- Traduire le site de l'anglais vers le français et vice-versa en utilisant Project Profiles.
- Placer les fichiers (graphes, vidéos, cartes) dans les bons dossiers et bien les référencer afin qu'ils puissent être affichés sur le site (problème de chemin d'accès).

## Difficultés

### Louison
- Utiliser **Git** : apprendre et gérer les branches pour collaborer efficacement.
- Réorganisation du code :
  - Avant : code monolithique.
  - Après : organisation en classes et modules Python.

## Avant/Après Réorganisation du Code

Voici un aperçu de la structure du projet avant et après avoir réorganisé le code en modules Python. 

![Avant](images/arbre_avant_modules.PNG)
![Après](images/arbre_apres_module.PNG)



